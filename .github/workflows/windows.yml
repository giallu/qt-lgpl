# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Windows build

on:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  
  QT_VERSION: 6.8.0
  QT_RELEASE: 1
  PLATFORM: win2019


jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019
    
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "QT_VERSION_XY=$(echo ${{ env.QT_VERSION }} | cut -d. -f1-2)" >> "$GITHUB_OUTPUT"
        echo "QT_NVR=$(echo qt-${{ env.QT_VERSION }}-${{ env.QT_RELEASE }}-${{ env.PLATFORM }})" >> "$GITHUB_OUTPUT"

    # Needed to use GNU patch instead of Strawberry Perl patch
    # https://github.com/actions/runner-images/issues/5459#issuecomment-1532856844
    - name: Set up PATH on Windows
      if: runner.os == 'Windows'
      run: echo "C:\Program Files\Git\usr\bin" >> $env:GITHUB_PATH

    - name: Download and extract Qt sources
      shell: bash
      run: |
        curl -LO https://download.qt.io/archive/qt/${{ env.QT_VERSION_XY }}/${{ env.QT_VERSION }}/single/qt-everywhere-src-${{ env.QT_VERSION }}.zip
        unzip qt-everywhere-src-${{ env.QT_VERSION }}.zip

    - name: Install dependencies
      run: vcpkg install openssl --triplet=x64-windows-static

    - name: Configure build
      shell: cmd
      run: >
        qt-everywhere-src-${{ env.QT_VERSION }}\configure.bat
        -verbose
        -openssl-linked
        -nomake examples
        -nomake tests
        -release
        -no-use-gold-linker
        -qt-libjpeg
        -qt-libpng
        -qt-zlib
        -opengl dynamic
        -mp
        -skip qt3d
        -skip qtcanvas3d
        -skip qtcharts
        -skip qtconnectivity
        -skip qtdatavis3d
        -skip qtdoc
        -skip qtgamepad
        -skip qtlocation
        -skip qtmultimedia
        -skip qtpurchasing
        -skip qtscript
        -skip qtscxml
        -skip qtsensors
        -skip qtserialbus
        -skip qtserialport
        -skip qtspeech
        -skip qtvirtualkeyboard
        -skip qtwayland
        -skip qtwebengine
        -skip qtwebsockets
        -skip remoteobjects
        -prefix C:\Qt\
        --
        -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DOPENSSL_ROOT_DIR="C:/vcpkg/installed/x64-windows-static"

    - name: Build and install Qt
      shell: cmd
      run: |
         cmake --build . --parallel %NUMBER_OF_PROCESSORS%
         cmake --install .

