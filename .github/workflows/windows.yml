name: Build Qt

on:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  
  QT_VERSION: 6.8.0
  QT_RELEASE: 1

jobs:
  build:
    # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
    strategy:
      fail-fast: false
    
      matrix:
        include:
          - os: windows-2019
            suffix: win2019
            triplet: x64-windows-static
            prefix: C:/Qt
            archive: zip
  
          - os: ubuntu-22.04
            suffix: ubuntu2204
            triplet: x64-linux
            prefix: /Qt
            archive: tar.xz


    runs-on: ${{ matrix.os }} 
    steps:
    - uses: actions/checkout@v4

    - name: Set up Visual Studio shell
      if: runner.os == 'Windows'
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: Set version strings
      shell: bash
      run: |
        echo "QT_VERSION_XY=$(echo ${{ env.QT_VERSION }} | cut -d. -f1-2)" >> "$GITHUB_ENV"
        echo "QT_NVR=$(echo qt-${{ env.QT_VERSION }}-${{ env.QT_RELEASE }}-${{ matrix.suffix }})" >> "$GITHUB_ENV"

    # Needed to use GNU patch instead of Strawberry Perl patch
    # https://github.com/actions/runner-images/issues/5459#issuecomment-1532856844
    - name: Set up PATH on Windows
      if: runner.os == 'Windows'
      run: echo "C:\Program Files\Git\usr\bin" >> $env:GITHUB_PATH

    - name: Download and extract Qt sources
      shell: bash
      run: |
        curl -LO https://download.qt.io/archive/qt/${{ env.QT_VERSION_XY }}/${{ env.QT_VERSION }}/single/qt-everywhere-src-${{ env.QT_VERSION }}.tar.xz
        tar xf qt-everywhere-src-${{ env.QT_VERSION }}.tar.xz

    - name: Install dependencies
      run: vcpkg install openssl --triplet=${{ matrix.triplet }}

    - name: Configure build
      shell: bash
      run: >
        qt-everywhere-src-${{ env.QT_VERSION }}\configure${{ runner.os == 'Windows' && '.bat' || '' }}
        -cmake-generator Ninja
        -openssl-linked
        -make libs
        -make tools
        -release
        -no-use-gold-linker
        -qt-libjpeg
        -qt-libpng
        -qt-zlib
        -opengl dynamic
        -submodules qtbase,qtimageformats,qtdeclarative${{ runner.os == 'Windows' && 'qtactiveqt' || '' }}
        -prefix ${{ matrix.prefix }}
        --
        -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_INSTALLATION_ROOT }}/scripts/buildsystems/vcpkg.cmake
        -DOPENSSL_ROOT_DIR="${{ env.VCPKG_INSTALLATION_ROOT }}/installed/${{ matrix.triplet }}"

    - name: Compile and install
      shell: bash
      run: |
         cmake --build . --parallel
         cmake --install .

    - name: Create archive
      shell: bash
      env:
        ARCHIVE: ${{ runner.os == 'Windows' && '"C:\Program Files\7-Zip\7z.exe" a' || 'tar cjf'
      run: |
        ${{e nv.ARCHIVE }} ${{ env.QT_NVR }}.${{ matrix.archive }} ${{ matrix.prefix }}

    - name: Create artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.QT_NVR }}
        path: ${{ env.QT_NVR }}.${{ matrix.archive }}
        retention-days: 7
        if-no-files-found: error

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.QT_NVR }}
        target_commitish: ${{ github.sha }}
        files: |
          ${{ env.QT_NVR}}.${{ matrix.archive }}
          config.opt
          config.summary
